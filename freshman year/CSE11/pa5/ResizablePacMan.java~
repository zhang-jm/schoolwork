/*
* Name: Jamie Zhang
* Login: cs11fmd
* Date: November 6, 2014
* File: ResizablePacMan.java
* Sources of Help: Christopher Cabreros (student), objectdraw docs, 
*                  Java API docs
* 
* This program contains all the attributes and behaviors of a ResizablePacMan
* object. The constructor can be called to create a new ResizablePacMan object
* and the methods can be called to manipulate PacMan in various ways.
*/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import objectdraw.*; 

/*
* Name: ResizablePacMan
* Purpose: To define a ResizablePacMan object with various attributes 
* and behaviors.
*/
public class ResizablePacMan extends ActiveObject 
                             implements ActionListener,
                                        ChangeListener,
                                        MouseListener,
                                        MouseMotionListener

{ 
  //how much PacMan should grow and shrink each time it's resized
  private static final double GROWTH = 2;
  //used to draw PacMan
  private static final double START_ANGLE = 0;
  private static final double ARC_ANGLE = 300; 
  //used when rotating PacMan
  private static final double MAX_DEGREES = 360; 

  //speed PacMan rotates
  private int speed = 50;
  private static final int MAX_SPEED = 100;

  //used to halve numbers
  private static final double HALF = 0.5;
 
  //used to rotate PacMan
  private final int CHANGE_ANGLE = 10; 
  private double newStartAngle = START_ANGLE; 

  //starting PacMan size, and the max and min size PacMan grows and shrinks to
  private double startSize = 60; 
  private double maxSize = 120;
  private double minSize = 30;
 
  private FilledArc pacMan; 
  private Location center; 
  private Line vLine; 
  private Line hLine; 
  private DrawingCanvas canvas;
  private JButton start;
  private JButton stop;
  private JButton switchSpin;
  private JSlider speedSlider;
  
  //used to find the x value of the line
  private Location vLineLocation;
  //used to find the y value of the line
  private Location hLineLocation;

  //holds the canvas
  private int canvasHeight;
  private int canvasWidth;

  //holds the height and half the height of PacMan
  private double pacManHeight;
  private double halfHeight;
  
  //checks if PacMan is growing larger in size or not
  private boolean growingLarger = true;
  //checks if PacMan is spinning or not
  private boolean isRunning = false;
  private boolean isSpinningClockwise;

  //checks if PacMan is pressed on
  private boolean isPressed = false;

  //the point the canvas is pressed
  private Location pressedPoint;

  //used to update PacMan's location
  private double widthProportion;
  private double heightProportion;

  /*
  * Name: ResizablePacMan
  * Purpose: Initializes all variables within the ResizablePacMan object when
  * it is created by taking in parameters.
  * Parameters: center - the upper left corner point of PacMan
  *             size - the original size of PacMan
  *             canvas - the place where PacMan is drawn
  *             start - starts PacMan moving
  *             stop - stops movement of PacMan
  *             switchSpin - switches the direction PacMan rotates
  *             speedSlider - changes the speed of PacMan
  *             isRunning - checks if PacMan is moving or not
  *             isSpinningClockwise - checks if PacMan is spinning clockwise
  *             speed - speed of PacMan
  *             hLine - horizontal line used to define the quadrants
  *             vLine - vertical line used to define the quadrants
  */
  public ResizablePacMan(Location center, double size, DrawingCanvas canvas,
		         JButton start, JButton stop, JButton switchSpin,
			 JSlider speedSlider, boolean isRunning, 
			 boolean isSpinningClockwise,
			 int speed, Line hLine, Line vLine)
  {
    halfHeight = size * HALF;
    
    //moves PacMan so that its center will be at the location of the click
    this.center = center;
    center.translate(-halfHeight, -halfHeight);
    
    this.start = start;
    this.stop = stop;
    this.switchSpin = switchSpin;
    //takes the speed value of PacMan
    this.speedSlider = speedSlider;

    this.isRunning = isRunning;
    this.isSpinningClockwise = isSpinningClockwise;
    this.speed = speed;

    start.addActionListener(this);
    stop.addActionListener(this);
    switchSpin.addActionListener(this);
    speedSlider.addChangeListener(this);
    canvas.addMouseListener(this);
    canvas.addMouseMotionListener(this);

    //creates PacMan
    pacMan = new FilledArc(center, size, size, START_ANGLE, ARC_ANGLE, canvas);
    
    this.vLine = vLine;
    this.hLine = hLine;
    this.canvas = canvas;

    canvasHeight = canvas.getHeight();
    canvasWidth = canvas.getWidth();

    widthProportion = center.getX() / canvas.getWidth();
    heightProportion = center.getY() / canvas.getHeight();
    
    //calls the run method
    start();
  }
 
  /*
  * Name: run
  * Purpose: Runs the animation by manipulating the object.
  * Parameters: none
  * Return: void
  */
  public void run()
  {
    while(true) //loops forever
    {
      if(isRunning)
      {
        this.startRunning();
      }
      else
      {
        this.stopRunning();
      }

      //checks and updates PacMan's color if it has moved to a different
      //quadrant
      this.updatePacManColor();

      this.updateLocation();
 
      //used to make PacMan look animated
      if(speed < MAX_SPEED)
      {
        pause(Math.abs(MAX_SPEED - speed));
      }
      else
      {
        pause(1);
      }
    }
  }

  /*
  * Name: updatePacManColor
  * Purpose: Checks the location of PacMan in relation to the four quadrants
  * and updates PacMan's color if PacMan has moved to a different quadrant
  * Parameters: none
  * Return: void
  */
  private void updatePacManColor()
  {
    halfHeight = pacMan.getHeight() * HALF;
    
    //checks where the lines are on the canvas
    vLineLocation = vLine.getStart();
    hLineLocation = hLine.getStart();
    
    //if in lower right quadrant
    if(pacMan.getX() + halfHeight > vLineLocation.getX() && 
       pacMan.getY() + halfHeight > hLineLocation.getY())
    {
      pacMan.setColor(Color.BLACK);
    }
    //if in upper right quadrant
    else if(pacMan.getX() + halfHeight > vLineLocation.getX() &&
	    pacMan.getY() + halfHeight < hLineLocation.getY())
    {
      pacMan.setColor(Color.CYAN);
    }
    //if in lower left quadrant
    else if(pacMan.getX() + halfHeight < vLineLocation.getX() &&
	    pacMan.getY() + halfHeight > hLineLocation.getY())
    {
      pacMan.setColor(Color.YELLOW);
    }
    //if in upper left quadrant
    else if(pacMan.getX() + halfHeight < vLineLocation.getX() &&
	    pacMan.getY() + halfHeight < hLineLocation.getY())
    {
      pacMan.setColor(Color.MAGENTA);
    }
  }

 private void updateLocation()
  {
    if(canvas.getWidth() != canvasWidth || canvas.getHeight() != canvasHeight)
    {
      pacMan.moveTo(canvas.getWidth() * widthProportion - 
		  pacMan.getWidth() * HALF, 
		  canvas.getHeight() * heightProportion -
		  pacMan.getHeight() * HALF);
    }

    canvasHeight = canvas.getHeight();
    canvasWidth = canvas.getWidth();
  }

  private void startRunning()
  {
      //changes the size of PacMan
      if(pacMan.getHeight() < maxSize && growingLarger)
      {
        this.growLarger();
      }
      else if(pacMan.getHeight() >= maxSize)
      {
        //PacMan starts shrinking if it has reached the max size
        this.growSmaller();
        growingLarger = false;
      }
      else if(pacMan.getHeight() <= minSize)
      {
        //PacMan starts growing if it has reached the min size
        this.growLarger();
	growingLarger = true;
      }
      else if(pacMan.getHeight() < maxSize && !growingLarger)
      {
        this.growSmaller();
      }   
      
      //resets the start angle so that PacMan rotates
      if(isSpinningClockwise)
      {
        newStartAngle = (newStartAngle - CHANGE_ANGLE) % (-MAX_DEGREES);
        pacMan.setStartAngle(newStartAngle);
      }
      else
      {
        newStartAngle = (newStartAngle + CHANGE_ANGLE) % (MAX_DEGREES);
	pacMan.setStartAngle(newStartAngle);
      }      
  }

  private void stopRunning()
  {
    pacMan.setSize(pacMan.getWidth(), pacMan.getHeight());
    pacMan.setStartAngle(newStartAngle);
  }

  /*
  * Name: growLarger
  * Purpose: Increases the size of PacMan
  * Parameters: none
  * Return: void
  */
  private void growLarger()
  {
     //resizes PacMan
     pacMan.setSize(pacMan.getHeight() + GROWTH, pacMan.getWidth() + GROWTH);
     //moves PacMan so it looks like it is increasing around the center
     pacMan.move(-GROWTH * HALF, -GROWTH * HALF);
  }
  
  /*
  * Name: growSmaller
  * Purpose: Decreases the size of PacMan
  * Parameters: none
  * Return: void
  */
  private void growSmaller()
  { 
    //resizes PacMan
    pacMan.setSize(pacMan.getHeight() - GROWTH, pacMan.getWidth() - GROWTH);
    //moves PacMan so it looks like it is decreasing around the center
     pacMan.move(GROWTH * HALF, GROWTH * HALF);
  }

  @Override
  public void mousePressed(MouseEvent evt)
  {
    pressedPoint = new Location(evt.getX(), evt.getY());
    
    if(pacMan.contains(pressedPoint))
      {
        isPressed = true;
      }
  }

  @Override
  public void mouseReleased(MouseEvent evt)
  {
    isPressed = false;
  }

  @Override
  public void mouseClicked(MouseEvent evt)
  {
  }

  @Override
  public void mouseEntered(MouseEvent evt)
  {
  }

  @Override
  public void mouseExited(MouseEvent evt)
  {
  }

  @Override
  public void mouseDragged(MouseEvent evt)
  {
    Location point = new Location (evt.getX(), evt.getY());
    
    if(isPressed)
    {
      pacMan.move(point.getX() - pressedPoint.getX(), 
		  point.getY() - pressedPoint.getY());
      pressedPoint = point;
    }

    widthProportion = center.getX() / canvas.getWidth();
    heightProportion = center.getY() / canvas.getHeight();

  }

  @Override
  public void mouseMoved(MouseEvent evt)
  {
  }

  @Override
  public void actionPerformed(ActionEvent evt)
  {
    if(evt.getSource() == start)
    {
      isRunning = true;
    }
    else if(evt.getSource() == stop)
    {
      isRunning = false;
    }
    else
    {
      isSpinningClockwise = !isSpinningClockwise;
    }
  }
   
  @Override
  public void stateChanged(ChangeEvent evt)
  {
    speed = speedSlider.getValue();
  }

} //end class ResizablePacMan
